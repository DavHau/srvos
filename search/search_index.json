{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hello","text":"<p>SrvOS is a collection of opinionated and sharable NixOS configurations.</p> <p>As we learn more about NixOS in various deployments, we end up re-writing the same modules and configs. This is a way for us to speed up and share our setups.</p> <p>Instead of supporting everything, our goal is to target certain verticals and make the support super smooth there.</p>"},{"location":"#quick-usage","title":"Quick Usage","text":"<p>Add <code>srvos</code> to your <code>flake.nix</code> to augment your NixOS configuration. For example to deploy a GitHub Action runner on Hetzner:</p> <pre><code>{\ninputs = {\n    srvos.url = \"github:numtide/srvos\";\n};\noutputs = { srvos, nixpkgs, ... }: {\n    nixosConfigurations.myHost = nixpkgs.lib.nixosSystem {\nsystem = \"x86_64-linux\";\nmodules = [\n        srvos.nixosModules.common\n        srvos.nixosModules.hardware-hetzner-amd\n        srvos.nixosModules.roles-github-actions-runner\n      ];\n};\n};\n}\n</code></pre>"},{"location":"#technologies","title":"Technologies","text":"<p>SrvOS is a thin wrapper, sitting on the shoulder of others:</p> <ul> <li>Nix and NixOS of course.</li> <li>nixos-anywhere to bootstrap new systems.</li> <li>disko to partition and configure disks.</li> </ul>"},{"location":"installation/hetzner_cloud/","title":"Hetzner Cloud installation","text":"<p>\u26a0\ufe0f Only works with VMs that have more than 2GB of RAM.</p> <p>\u26a0\ufe0f This document reflects more of an ideal than reality right now.</p> <ol> <li>Create the VM in Hetzner Cloud, get the IP, IPv6, set the SSH public key.</li> <li>Create a new NixOS configuration in your flake:</li> </ol> <pre><code>{\n  inputs.nixos-anywhere.url = \"github:numtide/nixos-anywere\";\n  inputs.srvos.url = \"github:numtide/srvos\"; \n  inputs.disko.url = \"github:nix-community/disko\";\noutputs = { self, nixos-remote, srvos, disko, nixpkgs }: {\n    nixosConfigurations.my-host = nixpkgs.lib.nixosSystem {\nsystem = \"x86_64-linux\";\nmodules = [{ \nimports = [ \n          srvos.nixosModules.hardware-hetzner-cloud\n          srvos.nixosModules.server\n\n# Are those together?\n          disko.nixosModules.disko\n          srvos.diskoModules.disk-layout-single-v1\n        ];\n        networking.hostName = \"my-host\";\n# FIXME: Hetzner Cloud doesn't provide us with that configuration\n        systemd.network.networks.\"10-uplink\".networkConfig.Address = \"2a01:4f9:c010:52fd::1/128\";\n}];\n};\n# TODO other $systems\n    devShells.x86_64-linux.default = with nixpkgs.legacyPackages.x86_64-linux; mkShellNoCC {\npackages = [\n# TODO: add nixos-rebuild as a package\n        nixos-anywhere.packages.x86_64-linux.default\n      ];\n};\n};\n}\n</code></pre> <ol> <li> <p>Update the hostname and IPv6 address in the config.</p> </li> <li> <p>Bootstrap the NixOS deployment:    <pre><code>$ nix develop\n$ nixos-anywhere --flake .#my-host --target &lt;ip&gt;\n</code></pre></p> </li> </ol> <p>\ud83c\udf89</p> <ol> <li>Pick a nixos deployment tool of your choice! Eg:</li> </ol> <pre><code>$ nixos-rebuild --flake .#my-host --target &lt;ip&gt; switch\n</code></pre>"},{"location":"nixos/general/","title":"General","text":""},{"location":"nixos/general/#general","title":"General","text":"<p>Used to define the type of machine.</p> <ul> <li><code>server</code>:</li> <li>Use this for headless systems that are remotely managed via ssh</li> <li>Includes everything from common</li> <li>Disables desktop features like sound</li> <li>Defaults to UTC</li> <li>Enables ssh</li> <li>Configures watchdog for reboot</li> <li>Sets up sudo without password</li> <li>...</li> <li><code>desktop</code>:</li> <li>Mostly based on common but also includes some optimization for useful for interactive usage</li> <li><code>common</code>:</li> <li>Use if you are unsure if your nixos module will be used on server or desktop</li> <li>Better nix-daemon defaults</li> <li>Better serial console support</li> <li>Colored package diffs on nixos-rebuild</li> <li>Use systemd in initrd by default and networkd as a backend for the     Networking module</li> <li>Do not block on networkd/networkmanager's online target</li> <li>Better zfs defaults</li> <li>Add well-known ssh git ssh keys to the git configuration</li> </ul>"},{"location":"nixos/hardware/","title":"Hardware","text":""},{"location":"nixos/hardware/#hardware","title":"Hardware","text":"<p>NixOS hardware configurations that we know about.</p> <ul> <li><code>hardware-amazon</code>: Amazon AWS virtual machines</li> <li><code>hardware-hetzner-cloud</code>: Hardware and network defaults for Hetzner virtual machine</li> <li><code>hardware-hetzner-amd</code>: Hardware and network defaults for Hetzner bare-metal servers for AMD and Intel cpus.</li> <li><code>hardware-hetzner-intel</code>: \"</li> </ul>"},{"location":"nixos/mixins/","title":"Mixins","text":""},{"location":"nixos/mixins/#mixins","title":"Mixins","text":"<p>Config extensions for a given machine.</p> <ul> <li><code>mixins-cloud-init</code> enables cloud-init</li> <li><code>mixins-systemd-boot</code> configure systemd-boot as bootloader</li> <li><code>mixins-telegraf</code> enables a generic telegraf configuration. See Mic's dotfiles   for monitoring rules targeting this telegraf configuration.</li> <li><code>mixins-nginx</code> recommended nginx settings</li> <li><code>mixins-trusted-nix-caches</code> list of trust-worthy public binary caches</li> </ul>"},{"location":"nixos/roles/github_actions_runner/","title":"Installing a GitHub Action Runner","text":"<p>GitHub Action Runners are processes that execute the automated jobs you specify in your GitHub Actions workflows. These runners can be hosted on GitHub-hosted infrastructure or your infrastructure. Self-hosted runners run for your project only and are available at no additional cost.</p> <p>This article looks at how to install a GitHub runner in your own NixOS infrastructure, making sure the environment is scalable and secure.</p> <p>We have built a NixOS module that installs one or more self-hosted github action runner, along with a cachix watch store service with the most secure defaults.</p>"},{"location":"nixos/roles/github_actions_runner/#authentication","title":"Authentication","text":"<p>In order to use a self-hosted GitHub action runner, you will need to register the runner with your GitHub account or organization. There are three different ways a self hosted runner can register itself on GitHub:</p> <ul> <li>Using a Registration token</li> <li>Using a Personal Authentication token</li> <li>Using a Github app</li> </ul> <p>In this document, I will describe the most secure option: how to connect using a new GitHub App in your organization.</p> <p>To ensure that you have complete control over the permissions that the app requires, you should create your own GitHub Application.</p> <p>First, go to the setting page of your organization: <code>https://github.com/organizations/&lt;YOUR ORGANIZATION&gt;/settings/apps</code></p> <ul> <li>Click on <code>New GitHub App</code>.</li> <li>In \"GitHub App name\" type <code>&lt;YOUR ORGANISATION&gt; App for GitHub runners</code>.</li> <li>In \"Homepage\" fill in your project URL. It is required but won't be used hereafter.</li> <li>Unselect <code>Expire user authorization tokens</code>.</li> <li>Unselect <code>Active</code> in the \"Webhook\" section.</li> <li>In the \"Organization permissions\" select <code>Read and write</code> next to the \"Self-hosted runner\" permission</li> <li>Click on <code>Create GitHub App</code></li> </ul> <p>You should save securely the generated PEM encoded private key. You will need that private key when you configure the CI. You should also save the generated GitHub App Id.</p> <p>Once created, you should also limit the usage of this github app to your CI hosts public IPs (ipv4 and ipv6).</p> <p>The application can be now be installed in your organization:</p> <ul> <li>Go to <code>https://github.com/organizations/&lt;YOUR ORGANIZATION&gt;/settings/apps</code></li> <li>Click on the Edit button for your newly created GitHub app</li> <li>Click on Install App and choose to install it on your organization</li> </ul> <p>You can now use the NixOS role to install and configure the GitHub self hosted runner in your NixOS CI host.</p> <p>If someone else is configuring the runner for you, you will need to provide him the the generated PEM encoded private key and the GitHub App Id.</p> <p>You can find more information in the Official GitHub App creation documentation.</p>"},{"location":"nixos/roles/github_actions_runner/#using-the-nixos-module","title":"Using the NixOS module","text":"<p>The module has been created as a role. Roles are used to define the specific purpose of a node, making it easy to manage and scale your infrastructure.</p> <p>The following options must be configured</p> <p><code>url</code> the full URI to your organization or your repository. This URI has to match with the location where you installed the GitHub App.</p> <p><code>count</code> the number of runners you want to start on the host.</p> <p><code>githubApp.id</code> the Id of the GitHub App that was created.</p> <p><code>githubApp.login</code> the name of your organization / user where the GitHub App was registered.</p> <p><code>githubApp.privateKeyFile</code> the path to the file containing the GitHub App generated PEM encoded private key. This file should be present on the host and deployed as a secret (using sops-nix or agenix).</p> <p><code>cachix.cacheName</code> the name of your cachix organization.</p> <p><code>cachix.tokenFile</code> the path to the file containing your cachix token. This file should also be present on the host and deployed as a secret (using sops-nix or agenix).</p> <p>Example of a module to configure 12 Github runners:</p> <pre><code>roles.github-actions-runner = {\n  url = \"https://github.com/&lt;YOUR ORGANIZATION&gt;\";\n  count = 12;\n  name = \"github-runner\";\n  githubApp = {\n    id = \"&lt;YOUR GENERATED APP ID&gt;\";\n    login = \"&lt;YOUR ORGANIZATION&gt;\";\n    privateKeyFile = config.age.secrets.github-app-runner-private-key.path;\n  };\n  cachix.cacheName = \"&lt;YOUR CACHIX ORGANIZATION&gt;\";\n  cachix.tokenFile = config.age.secrets.cachixToken.path;\n};\n</code></pre>"},{"location":"nixos/roles/github_actions_runner/#scaling","title":"Scaling","text":"<p>There are multiple ways to scale your GitHub runners, such as increasing the number of hosts or increasing the number of services on a single host. All services are completely isolated from each other, so there is no real distinction between one or the other approach. Your decision should be based on the compute/memory power your project needs.</p> <p>You now have a fully functional self-hosted runner running on your NixOS infrastructure. If you need any further assistance in managing or improving your CI workflows with Nix, don't hesitate to contact us. Our team of experts is here to help you optimize your CI/CD pipelines and streamline your development process.</p>"}]}